{"version":3,"sources":["App.tsx","Button.tsx","reportWebVitals.ts","index.tsx"],"names":["allButtons","App","useState","inputValue","setInputValue","history","setHistory","action","setAction","memmoryValue","setMemmoryValue","onChangeInput","e","value","target","replace","match","length","substr","lastIndexOf","resultHandler","eval","checkHandler","onKeyPressCharCodeHandler","onKeyPressHandler","charCode","onClick","toString","includes","slice","Number","localStorage","setItem","JSON","stringify","getStorageValue","getItem","parse","removeItem","className","readOnly","type","autoFocus","onKeyPress","onChange","map","b","Button","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.511e6e43.chunk.js","sourcesContent":["import React, { ChangeEvent, useState } from 'react';\nimport './App.css';\nimport { Button } from \"./Button\";\n\nconst allButtons = [\n    'MC', 'M+', 'M-', 'MR',\n    'C', '+/-', '/', '*',\n    '7', '8', '9', '-',\n    '4', '5', '6', '+',\n    '1', '2', '3', '=',\n    '<', '0', '.']\n\nconst App = () => {\n\n    const [inputValue, setInputValue] = useState<string | number>('')\n    const [history, setHistory] = useState<string | number>('')\n    const [action, setAction] = useState<string | number>('')\n    const [memmoryValue, setMemmoryValue] = useState<string | null>('')\n\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\n        let value: any = e.target.value.replace(/[^\\d.]*/g, '')\n        if (value.match(/\\./g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\".\"))\n        } else if (value.match(/\\-/g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"-\"))\n        } else if (value.match(/\\+/g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"+\"))\n        } else if (value.match(/\\*/g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"*\"))\n        } else if (value.match(/\\/\\//g)?.length > 1) {\n            value = value.substr(0, value.lastIndexOf(\"/\"))\n        }\n        setInputValue(value)\n    }\n\n    const resultHandler = () => {\n        if (inputValue === \"0\") {\n            setHistory('')\n            setAction('')\n            setInputValue('Error')\n        } else if (inputValue && history && action) {\n            setHistory('')\n            setAction('')\n            setInputValue(eval(history + `${action}` + inputValue))\n        }\n    }\n\n    const checkHandler = () => {\n        if (inputValue !== '') {\n            setHistory(inputValue)\n            setInputValue('')\n        }\n        if (inputValue === '') {\n            setHistory(history)\n        }\n        if (history !== '' && inputValue !== '') {\n            setInputValue('')\n            setHistory(eval(history + `${action}` + inputValue))\n        }\n        if (inputValue === '' && history === '') {\n            setAction('')\n        }\n    }\n\n\n    const onKeyPressCharCodeHandler = (action: string) => {\n        setInputValue('')\n        setAction(action)\n        setHistory(inputValue)\n        checkHandler()\n    }\n\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 42) {\n            onKeyPressCharCodeHandler('*')\n        } else if (e.charCode === 43) {\n            onKeyPressCharCodeHandler('+')\n        } else if (e.charCode === 45) {\n            onKeyPressCharCodeHandler('-')\n        } else if (e.charCode === 47) {\n            onKeyPressCharCodeHandler('/')\n        } else if (e.charCode === 13) {\n            resultHandler()\n        }\n    }\n\n    const onClick = (value: string) => {\n        switch (value) {\n            case '=':\n                setInputValue(history)\n                setHistory('')\n                setAction('')\n                resultHandler()\n                break\n            case '+':\n                checkHandler()\n                setAction(value)\n                break\n            case '-':\n                checkHandler()\n                setAction(value)\n                break\n            case '*':\n                checkHandler()\n                setAction(value)\n                break\n            case '/':\n                setAction(value)\n                checkHandler()\n                break\n            case 'C':\n                setInputValue('')\n                setHistory('')\n                setAction('')\n                break\n            case '+/-':\n                if (inputValue) {\n                    setInputValue(-inputValue)\n                }\n                break\n            case '1':\n                setInputValue(inputValue + value)\n                break\n            case '2':\n                setInputValue(inputValue + value)\n                break\n            case '3':\n                setInputValue(inputValue + value)\n                break\n            case '4':\n                setInputValue(inputValue + value)\n                break\n            case '5':\n                setInputValue(inputValue + value)\n                break\n            case '6':\n                setInputValue(inputValue + value)\n                break\n            case '7':\n                setInputValue(inputValue + value)\n                break\n            case '8':\n                setInputValue(inputValue + value)\n                break\n            case '9':\n                setInputValue(inputValue + value)\n                break\n            case '0':\n                setInputValue(inputValue + value)\n                break\n            case '.':\n                if (inputValue.toString().includes(value)) {\n                    value = ''\n                }\n                setInputValue(inputValue + value)\n                break\n            case '<':\n                setInputValue(inputValue.toString().slice(0, -1))\n                break\n            case 'M+':\n                setInputValue(Number(inputValue) + Number(memmoryValue))\n                break\n            case 'M-':\n                setInputValue(Number(inputValue) - Number(memmoryValue))\n                break\n            case 'MR':\n                localStorage.setItem('MR', JSON.stringify(inputValue))\n                let getStorageValue: any = localStorage.getItem('MR')\n                setMemmoryValue(JSON.parse(getStorageValue))\n                break\n            case 'MC':\n                localStorage.removeItem('MR')\n                setMemmoryValue('')\n                break\n        }\n    }\n    return (\n        <div className=\"App\">\n            <h1>Calculator</h1>\n            <div className=\"calc\">\n                <div>\n                    <div className='result'>\n                        <input className={'input-history'} value={history} readOnly type='text' />\n                        <input className={'input-action'} value={action} readOnly type='text' />\n                        <input className={'input-result'}\n                            type=\"text\"\n                            autoFocus\n                            onKeyPress={onKeyPressHandler}\n                            value={inputValue} onChange={onChangeInput} />\n                    </div>\n                    <div className='buttons-table'>\n                        {allButtons.map(b => <Button key={b} value={b} onClick={onClick} />)}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\ntype ButtonProps = {\r\n    value: string\r\n    res?: string | number\r\n    onClick: (value: string) => void\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n    return (\r\n        <div onClick={() => props.onClick(props.value)} className='button'>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}